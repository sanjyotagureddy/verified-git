name: Tag on Merge

on:
  push:
    branches: [ "master" ]

jobs:
  tag:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for all branches and tags

      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Fetch tags and check if latest tag exists
        id: check_tag
        run: |
          # Fetch the latest tags
          git fetch --tags
          LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1` || echo "0.0.0.0")
          echo "Latest tag: $LATEST_TAG"

          # Check if the tag already exists
          if git rev-parse "refs/tags/$LATEST_TAG" >/dev/null 2>&1; then
            echo "Tag exists"
            echo "::set-output name=tag_exists::true"
          else
            echo "Tag does not exist"
            echo "::set-output name=tag_exists::false"
          fi

      - name: Determine new version
        if: steps.check_tag.outputs.tag_exists == 'false'
        id: version
        run: |
          # Split the version into an array
          IFS='.' read -ra VERSION_PARTS <<< "$LATEST_TAG"

          # Initialize version parts
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}
          BUILD=${VERSION_PARTS[3]:-0}

          # Check if there are any commits to process
          if [ $(git rev-list --count HEAD) -eq 0 ]; then
            echo "No commits to process."
            exit 0
          fi

          # Check the commit messages
          COMMITS=$(git log --format=%B -n 1)
          if echo "$COMMITS" | grep -q 'MAJOR:'; then
            ((MAJOR++))
            MINOR=0
            PATCH=0
            BUILD=0
          elif echo "$COMMITS" | grep -q 'MINOR:'; then
            ((MINOR++))
            PATCH=0
            BUILD=0
          elif echo "$COMMITS" | grep -E -q 'feat:|fix:|feature:|bug:|chore:|refactor:'; then
            ((PATCH++))
            BUILD=0
          else
            ((BUILD++))
          fi

          # Output the new version
          NEW_TAG="$MAJOR.$MINOR.$PATCH.$BUILD"
          echo "New tag: $NEW_TAG"
          echo "::set-output name=new_tag::$NEW_TAG"

      - name: Create new tag
        if: steps.check_tag.outputs.tag_exists == 'false'
        run: |
          git tag ${{ steps.version.outputs.new_tag }}
          git push origin ${{ steps.version.outputs.new_tag }}
