name: Tag on Merge

on:
  push:
    branches: [ "master" ]

jobs:
  tag:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for all branches and tags

      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Determine new version
        id: version
        run: |
          echo "Fetching latest tags..."
          git fetch --tags

          echo "Getting the latest tag..."
          LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "0.0.0.0")
          echo "Latest tag: $LATEST_TAG"

          # Remove the 'v' prefix if present
          LATEST_TAG="${LATEST_TAG#v}"

          # Split the version into an array
          IFS='.' read -ra VERSION_PARTS <<< "$LATEST_TAG"
          echo "Version parts: ${VERSION_PARTS[@]}"

          # Initialize version parts
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}
          BUILD=${VERSION_PARTS[3]:-0}
          echo "Initial version: MAJOR=$MAJOR, MINOR=$MINOR, PATCH=$PATCH, BUILD=$BUILD"

          # Get the commit messages from the latest commit
          COMMITS=$(git log --format=%B -n 1 HEAD)
          echo "Commit messages: $COMMITS"

          # Debugging: Print patterns and commit messages
          echo "Pattern for MAJOR increment: '^MAJOR:'"
          echo "Matching commit messages against the pattern:"
          echo "$COMMITS" | grep -q '^MAJOR:' && echo "Pattern matched for MAJOR increment" || echo "Pattern did not match for MAJOR increment"

          if echo "$COMMITS" | grep -q '^MAJOR:'; then
            echo "Incrementing MAJOR version"
            ((MAJOR++))
            MINOR=0
            PATCH=0
            BUILD=0
          else
            echo "Pattern for MINOR increment: '^MINOR:'"
            echo "Matching commit messages against the pattern:"
            echo "$COMMITS" | grep -q '^MINOR:' && echo "Pattern matched for MINOR increment" || echo "Pattern did not match for MINOR increment"

            if echo "$COMMITS" | grep -q '^MINOR:'; then
              echo "Incrementing MINOR version"
              ((MINOR++))
              PATCH=0
              BUILD=0
            else
              echo "Pattern for PATCH increment (with colon): '^(feat|fix|feature|bug|chore|refactor):'"
              echo "Matching commit messages against the pattern:"
              echo "$COMMITS" | grep -E -q '^(feat|fix|feature|bug|chore|refactor):' && echo "Pattern matched for PATCH increment (with colon)" || echo "Pattern did not match for PATCH increment (with colon)"
              
              if echo "$COMMITS" | grep -E -q '^(feat|fix|feature|bug|chore|refactor):'; then
                echo "Incrementing PATCH version based on keyword with colon"
                ((PATCH++))
                BUILD=0
              else
                echo "Pattern for PATCH increment (without colon): '^(feat|fix|feature|bug|chore|refactor)'"
                echo "Matching commit messages against the pattern:"
                echo "$COMMITS" | grep -E -q '^(feat|fix|feature|bug|chore|refactor)' && echo "Pattern matched for PATCH increment (without colon)" || echo "Pattern did not match for PATCH increment (without colon)"
                
                if echo "$COMMITS" | grep -E -q '^(feat|fix|feature|bug|chore|refactor)'; then
                  echo "Incrementing PATCH version based on keyword without colon"
                  echo "before version: MAJOR=$MAJOR, MINOR=$MINOR, PATCH=$PATCH, BUILD=$BUILD"
                  ((PATCH++))
                  echo "After version: MAJOR=$MAJOR, MINOR=$MINOR, PATCH=$PATCH, BUILD=$BUILD"
                  BUILD=0
                  echo "last version: MAJOR=$MAJOR, MINOR=$MINOR, PATCH=$PATCH, BUILD=$BUILD"
                else
                  echo "No recognized keywords found. Incrementing BUILD version"
                  ((BUILD++))
                fi
              fi
            fi
          fi

          # Output the new version to the environment file
          NEW_TAG="v$MAJOR.$MINOR.$PATCH.$BUILD"
          echo "New tag: $NEW_TAG"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV

      - name: Create and push new tag
        run: |
          echo "Checking if the new tag already exists..."
          # Check if the new tag already exists
          if git rev-parse "refs/tags/${{ env.NEW_TAG }}" >/dev/null 2>&1; then
            echo "Tag ${NEW_TAG} already exists. Exiting."
            exit 0
          fi

          echo "Creating and pushing new tag ${NEW_TAG}"
          git tag ${{ env.NEW_TAG }}
          git push origin ${{ env.NEW_TAG }}
